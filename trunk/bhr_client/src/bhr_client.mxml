<?xml version="1.0" encoding="utf-8"?>
<s:Application xmlns:fx="http://ns.adobe.com/mxml/2009" 
			   xmlns:s="library://ns.adobe.com/flex/spark" 
			   xmlns:mx="library://ns.adobe.com/flex/mx" 
			   currentState="loginState" 
			   xmlns:components="components.*" xmlns:services="services.*"  
			   width.portalState="100%" height.portalState="100%" applicationComplete="init()">
	
	<!-- Properties of the parent ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	
	<s:layout>
		<s:VerticalLayout 
			horizontalAlign.loginState="center"
			horizontalAlign.portalState="left"
			paddingLeft="25" 
			paddingTop="25" 
			paddingRight="25" paddingBottom.portalState="25"/>
	</s:layout>
	
	<!--
	The states property defines the application state of the component.
	In this case the component in question is the Application container.
	The states block below defines two application states: portalState and loginState.
	The first State defined is the default state.
	-->
	<s:states>    
		<s:State name="portalState"/>
		<s:State name="loginState"/>
	</s:states>
	
	<s:transitions>
		<s:Transition fromState="loginState" toState="portalState">
			<s:Sequence>
				<s:Fade target="{loginPanel}"/>
				<s:RemoveAction target="{loginPanel}"/>
				<s:AddAction targets="{[portalTB,portalVS,logoutB]}"/>
				<s:Fade targets="{[portalTB,portalVS,logoutB]}"/>
			</s:Sequence>
		</s:Transition>	
	</s:transitions>
	
	<!-- Metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	
	
	
	<!-- Styles ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<fx:Style source="bhr.css"/>
	
	
	<!-- Script ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	
	<fx:Script>
		<![CDATA[
			import components.*;
			
			import events.LoginEvent;
			
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.utils.URLUtil;
			
			import spark.components.NavigatorContent;
			
			import valueObjects.User;
			
			[Bindable]
			private var serverName:String;
			[Bindable]
			private var serverPort:String;
			
			private var USER_ADMIN:String = "User Admin";
			private var EMPLOYEE:String = "Employee";
			private var ANALYTICS:String = "Analytics";
			private var DAILY_CLINIC_REPORT:String = "Daily Clinic Report";
			private var DAILY_CLINIC_REPORT_FOR_MANAGER:String = "Daily Clinic Report for Manager";
			private var DAILY_CONTRIBUTION_REPORT:String = "Intake Staff Report";
			private var DATA_COMPLIANCE_PERSONNEL_TASKS:String = "Data Staff Report";
			private var UR_PERSONNEL_TASKS:String = "UR Staff Report";
			private var BILLING_DEPT_TASKS:String = "Billing Staff Report";
			private var PROJECT_LIST:String = "Administrative Staff Report";
			private var ACCOUNTING_REPORT:String = "Accounting Report";
			private var CASE_MANAGER_REPORT:String = "Case Manager Report";
			
			private var loggedInUser:User;
			
			private function init():void
			{
				serverName = URLUtil.getServerName(this.loaderInfo.url);
				if (serverName == ""){
					serverName = "localhost";
				}
				serverPort = URLUtil.getPort(this.loaderInfo.url).toString();
				if (serverPort == "0"){
					serverPort = "8090";
				}
			}
			
			protected function loginpanel1_loginEventHandler(event:LoginEvent):void
			{
				dataService.login(event.user);
			}
			
			
			protected function dataService_login_resultHandler(event:ResultEvent):void
			{
				loggedInUser = event.result as User;
				if (loggedInUser == null){
					Alert.show("Invalid username or password!", "Error Message");
					return;
				}
				dataService.getPermissionObject(loggedInUser.username);
			}
			
			protected function dataService_getPermissionObject_resultHandler(event:ResultEvent):void
			{ 
				currentState="portalState";
				
				var caps:ArrayCollection = event.result as ArrayCollection;
				var cap:String;
				
				var i:int;				
				for (i=0; i<caps.length; i++){
					cap = caps[i];
					var content:NavigatorContent = new NavigatorContent();
					switch (cap){
						case USER_ADMIN:
							var adminPanel:AdminPanel = new AdminPanel();
							adminPanel.dataService = dataService;
							adminPanel.percentWidth = 100;
							adminPanel.percentHeight = 100;
							content.addElement(adminPanel);
							content.label = USER_ADMIN;
							portalVS.addChild(content);
							break;
						case EMPLOYEE:
							var empPanel:EmployeePanel = new EmployeePanel();
							empPanel.dataService = dataService;
							empPanel.percentWidth = 100;
							empPanel.percentHeight = 100;
							content.addElement(empPanel);
							content.label = EMPLOYEE;
							portalVS.addChild(content);							break;
						case ANALYTICS:
							var dbPanel:DashboardPanel = new DashboardPanel();
							dbPanel.dataService = dataService;
							dbPanel.percentWidth = 100;
							dbPanel.percentHeight = 100;
							content.addElement(dbPanel);
							content.label = ANALYTICS;
							portalVS.addChild(content);							break;
						case DAILY_CLINIC_REPORT:
							var wsPanel:DailyClinicReportPanel = new DailyClinicReportPanel();
							wsPanel.dataService = dataService;
							wsPanel.user = loggedInUser;
							wsPanel.percentWidth = 100;
							wsPanel.percentHeight = 100;							
							content.addElement(wsPanel);
							content.label = DAILY_CLINIC_REPORT;
							portalVS.addChild(content);							break;
						case DAILY_CLINIC_REPORT_FOR_MANAGER:
							var wsmPanel:DailyClinicReportForManagerPanel = new DailyClinicReportForManagerPanel();
							wsmPanel.dataService = dataService;
							wsmPanel.user = loggedInUser;
							wsmPanel.percentWidth = 100;
							wsmPanel.percentHeight = 100;							
							content.addElement(wsmPanel);
							content.label = DAILY_CLINIC_REPORT_FOR_MANAGER;
							portalVS.addChild(content);							break;						
						case DAILY_CONTRIBUTION_REPORT:
							var dcrPanel:DailyContributionReportPanel = new DailyContributionReportPanel();
							dcrPanel.dataService = dataService;
							dcrPanel.user = loggedInUser;
							dcrPanel.percentWidth = 100;
							dcrPanel.percentHeight = 100;
							content.addElement(dcrPanel);
							content.label = DAILY_CONTRIBUTION_REPORT;
							portalVS.addChild(content);							break;		
						case DATA_COMPLIANCE_PERSONNEL_TASKS:
							var dctPanel:DataComplianceTaskPanel = new DataComplianceTaskPanel();
							dctPanel.dataService = dataService;
							dctPanel.user = loggedInUser;
							dctPanel.percentWidth = 100;
							dctPanel.percentHeight = 100;
							content.addElement(dctPanel);
							content.label = DATA_COMPLIANCE_PERSONNEL_TASKS;
							portalVS.addChild(content);							break;
						case UR_PERSONNEL_TASKS:
							var urPanel:URPersonnelTaskPanel = new URPersonnelTaskPanel();
							urPanel.dataService = dataService;
							urPanel.user = loggedInUser;
							urPanel.percentWidth = 100;
							urPanel.percentHeight = 100;
							content.addElement(urPanel);
							content.label = UR_PERSONNEL_TASKS;
							portalVS.addChild(content);							break;		
						case BILLING_DEPT_TASKS:
							var btPanel:BillingTaskPanel = new BillingTaskPanel();
							btPanel.dataService = dataService;
							btPanel.user = loggedInUser;
							btPanel.percentWidth = 100;
							btPanel.percentHeight = 100;
							content.addElement(btPanel);
							content.label = BILLING_DEPT_TASKS;
							portalVS.addChild(content);							break;		
						case PROJECT_LIST:
							var plPanel:ProjectListPanel = new ProjectListPanel();
							plPanel.dataService = dataService;
							plPanel.user = loggedInUser;
							plPanel.percentWidth = 100;
							plPanel.percentHeight = 100;
							content.addElement(plPanel);
							content.label = PROJECT_LIST;
							portalVS.addChild(content);							break;
						case ACCOUNTING_REPORT:
							var arPanel:AccountingReportPanel = new AccountingReportPanel();
							arPanel.dataService = dataService;
							arPanel.user = loggedInUser;
							arPanel.percentWidth = 100;
							arPanel.percentHeight = 100;
							content.addElement(arPanel);
							content.label = ACCOUNTING_REPORT;
							portalVS.addChild(content);							break;
						case CASE_MANAGER_REPORT:
							var cmPanel:CaseManagerReportPanel = new CaseManagerReportPanel();
							cmPanel.dataService = dataService;
							cmPanel.user = loggedInUser;
							cmPanel.percentWidth = 100;
							cmPanel.percentHeight = 100;
							content.addElement(cmPanel);
							content.label = CASE_MANAGER_REPORT;
							portalVS.addChild(content);							break;													
					};
				} 
			}
			
			protected function dataService_faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString, "Error Message");
			}						
			
			protected function logoutB_clickHandler(event:MouseEvent):void
			{
				currentState = "loginState";
				loginPanel.usernameTF.text = "";
				loginPanel.passwordTF.text = "";
				var ref:URLRequest = new URLRequest("javascript:location.reload(true)"); 
				navigateToURL(ref, "_self"); 				
			}
			
		]]>
	</fx:Script>
	
	
	<!-- Declarations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	<fx:Declarations>
		<s:RemoteObject id="dataService" 
						destination="dataService" 
						fault="dataService_faultHandler(event)"
						endpoint="http://{serverName}:{serverPort}/bhr2/messagebroker/amf">
			<mx:method name="login" result="dataService_login_resultHandler(event)"/>
			<mx:method name="getPermissionObject" result="dataService_getPermissionObject_resultHandler(event)"/>
		</s:RemoteObject>		
	</fx:Declarations>
	
	
	<!-- UI components ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ -->
	
	<mx:Image source="images/bhr_header.jpg" horizontalAlign="center"/>

	<mx:HBox horizontalAlign.portalState="left" width.portalState="100%" paddingBottom="20">
		<s:TabBar id="portalTB" includeIn="portalState" dataProvider="{portalVS}"/>						
		<mx:Spacer width="100%"/>		
		<s:Button id="logoutB" label="Logout" 
				  excludeFrom="loginState"				 
				  click="logoutB_clickHandler(event)"/>
	</mx:HBox>

	<mx:ViewStack includeIn="portalState" 
				  id="portalVS"
				  resizeToContent="true" width="100%" height="100%">
	</mx:ViewStack>	
	
	<components:LoginPanel id="loginPanel" includeIn="loginState" loginEvent="loginpanel1_loginEventHandler(event)" 
						   width="100%" height="100%"/>				
	
</s:Application>

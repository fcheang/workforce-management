<?xml version="1.0" encoding="utf-8"?>
<s:BorderContainer xmlns:fx="http://ns.adobe.com/mxml/2009" 
				   xmlns:s="library://ns.adobe.com/flex/spark" 
				   xmlns:mx="library://ns.adobe.com/flex/mx"
				   creationComplete="panel1_creationCompleteHandler(event)"
				   dropShadowVisible="true" borderWeight="1" backgroundColor="white">
	
	<fx:Declarations>
		<mx:NumberFormatter id="nf" precision="2" rounding="up"/>
		<mx:DateFormatter id="df" formatString="MM/DD/YYYY"/>
		
		<mx:NumberValidator id="hrsWorkedV" domain="real" required="false" minValue="0" maxValue="24" source="{hrsWorkedTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="countySeenV" domain="int" required="false" minValue="0" maxValue="1000" source="{countySeenTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="countyfmV" domain="int" required="false" minValue="0" maxValue="1440" source="{countyfmTI}" property="text" triggerEvent=""/>		
		<mx:NumberValidator id="countyomV" domain="int" required="false" minValue="0" maxValue="1440" source="{countyomTI}" property="text" triggerEvent=""/>		
		<mx:NumberValidator id="cccSeenV" domain="int" required="false" minValue="0" maxValue="1000" source="{cccSeenTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="cccfmV" domain="int" required="false" minValue="0" maxValue="1440" source="{cccfmTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="cccomV" domain="int" required="false" minValue="0" maxValue="1440" source="{cccomTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="hmoSeenV" domain="int" required="false" minValue="0" maxValue="1000" source="{hmoSeenTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="hmofmV" domain="int" required="false" minValue="0" maxValue="1440" source="{hmofmTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="otherSeenV" domain="int" required="false" minValue="0" maxValue="1000" source="{otherSeenTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="otherfmV" domain="int" required="false" minValue="0" maxValue="1440" source="{otherfmTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="numScheduledV" domain="int" required="false" minValue="0" maxValue="1000" source="{numScheduledTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="numNoshowV" domain="int" required="false" minValue="0" maxValue="1000" source="{numNoshowTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="numCancelV" domain="int" required="false" minValue="0" maxValue="1000" source="{numCancelTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="numNewV" domain="int" required="false" minValue="0" maxValue="1000" source="{numNewTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="numDropinV" domain="int" required="false" minValue="0" maxValue="1000" source="{numDropinTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="dailySalaryV" domain="real" required="false" minValue="0" allowNegative="false" source="{dailySalaryTI}" property="text" triggerEvent=""/>		
	</fx:Declarations>	
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.managers.PopUpManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.mxml.RemoteObject;
			import mx.validators.ValidationResult;
			import mx.validators.Validator;
			
			import spark.events.IndexChangeEvent;
			
			import valueObjects.*;
			
			
			//label
			[Bindable]
			private static var CLINIC:String = "Clinic";
			[Bindable]
			private static var PROVIDER:String = "Provider";			
			[Bindable]
			private static var DATE:String = "Date";
			[Bindable]
			private static var PROVIDER_ID:String = "Id";
			[Bindable]
			private static var PROVIDER_NAME:String = "Name";
			[Bindable]
			private static var HRS_WORKED:String = "Hrs Worked";
			[Bindable]
			private static var COUNTY_SEEN:String = "COUNTY Seen";
			[Bindable]
			private static var COUNTY_FACE_MIN:String = "Billable Mins (face)";
			[Bindable]
			private static var COUNTY_OTHER_MIN:String = "Billable Mins (other)";			
			[Bindable]
			private static var CCC_SEEN:String = "CCC Seen";
			[Bindable]
			private static var CCC_FACE_MIN:String = "Billable Mins (face)";
			[Bindable]
			private static var CCC_OTHER_MIN:String = "Billable Mins (other)";			
			[Bindable]
			private static var HMO_SEEN:String = "HMO Seen";
			[Bindable]
			private static var HMO_FACE_MIN:String = "Billable Mins (face)";			
			[Bindable]
			private static var OTHER_SEEN:String = "Other Seen";
			[Bindable]
			private static var OTHER_FACE_MIN:String = "Billable Mins (face)";			
			[Bindable]
			private static var TOTAL_SCH:String = "Total Scheduled";
			[Bindable]
			private static var TOTAL_NOSHOW:String = "Total No-Shows";
			[Bindable]
			private static var TOTAL_CANCEL:String = "Total Cancelation";
			[Bindable]
			private static var NUM_NEW:String = "How many News";
			[Bindable]
			private static var NUM_DROPIN:String = "How many Drop-Ins";			
			// calculated column
			[Bindable]
			private static var TOTAL_FACE_HRS:String = "Total Hours (face)";
			[Bindable]
			private static var TOTAL_OTHER_HRS:String = "Total Hours (other)";
			[Bindable]
			private static var TOTAL_SEEN:String = "Total Seen";
			[Bindable]
			private static var PRODUCTIVITY:String = "Productivity";
			[Bindable]
			private static var DAILY_SALARY:String = "DAILY SALARY";
			[Bindable]
			private static var COUNTY_FACE_REV:String = "County (face) $";
			[Bindable]
			private static var COUNTY_OTHER_REV:String = "County (other) $";
			[Bindable]
			private static var CCC_REV:String = "CCC $";						
			[Bindable]
			private static var REVENUE:String = "REVENUE";
			[Bindable]
			private static var BALANCE:String = "TOTAL REVENUE BALANCE";
			[Bindable]
			private static var ENTERED_BY:String = "Entered By";
			
			public var dataService:RemoteObject;
			public var user:User;
			
			[Bindable]
			private var locations:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var worksheets:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var providers:ArrayCollection = new ArrayCollection();
			
			protected function panel1_creationCompleteHandler(event:FlexEvent):void
			{
				// setup handler
				dataService.createWorksheetForMgr.addEventListener(ResultEvent.RESULT, dataService_createWorksheetForMgr_resultHandler);
				
				dataService.updateWorksheetForMgr.addEventListener(ResultEvent.RESULT, dataService_updateWorksheetForMgr_resultHandler);
				
				dataService.deleteWorksheetForMgr.addEventListener(ResultEvent.RESULT, dataService_deleteWorksheetForMgr_resultHandler);
				
				dataService.getLocation.addEventListener(ResultEvent.RESULT, dataService_getLocation_resultHandler);
				
				dataService.getAllProvider.addEventListener(ResultEvent.RESULT, dataService_getAllProvider_resultHandler);
				
				dataService.getWorksheetForClinicAndDateRange.addEventListener(ResultEvent.RESULT, dataService_getWorksheet_resultHandler);
				dataService.getWorksheetForProviderAndDateRange.addEventListener(ResultEvent.RESULT, dataService_getWorksheet_resultHandler);
				dataService.getWorksheetForClinicAndProviderAndDateRange.addEventListener(ResultEvent.RESULT, dataService_getWorksheet_resultHandler);
				
				dataService.getWorksheetForClinicAndDateRange.addEventListener(FaultEvent.FAULT, dataService_getWorksheet_faultHandler);
				dataService.getWorksheetForProviderAndDateRange.addEventListener(FaultEvent.FAULT, dataService_getWorksheet_faultHandler);
				dataService.getWorksheetForClinicAndProviderAndDateRange.addEventListener(FaultEvent.FAULT, dataService_getWorksheet_faultHandler);
				
				
				// call remote svc
				dataService.getLocation();
				dataService.getAllProvider();
			}
			
			
			////////////////////
			// Result Handler //
			////////////////////			
			
			protected function dataService_getWorksheet_resultHandler(event:ResultEvent):void				
			{	
				worksheets = event.result as ArrayCollection;
				//findB.enabled = true;
				if (worksheets == null || worksheets.length == 0){
					Alert.show("No records found!");
				}				
			}
			
			protected function dataService_getWorksheet_faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString, "Error Message");
				//findB.enabled = true;
			}						
			
			protected function dataService_createWorksheetForMgr_resultHandler(event:ResultEvent):void
			{
				if (event.result != null){
					worksheets.addItem(event.result);
					//Alert.show("Worksheet entry was created successfully!");
				}else{
					Alert.show("Problem create worksheet entry!");
				}
			}
			
			protected function dataService_updateWorksheetForMgr_resultHandler(event:ResultEvent):void
			{
				if (event.result != null){
					worksheets.setItemAt(event.result, worksheetDG.selectedIndex);
					//Alert.show("Worksheet entry was updated successfully!");
				}else{
					Alert.show("Problem update worksheet entry!");
				}
			}
			
			protected function dataService_deleteWorksheetForMgr_resultHandler(event:ResultEvent):void
			{
				var removed:Boolean = event.result;
				if (removed){
					worksheets.removeItemAt(worksheetDG.selectedIndex);
					//Alert.show("Worksheet entry removed!");
				}else{
					Alert.show("Problem remove worksheet entry!");
				}				
			}			
			
			protected function dataService_getLocation_resultHandler(event:ResultEvent):void
			{
				locations = event.result as ArrayCollection;	
			}
			
			protected function dataService_getAllProvider_resultHandler(event:ResultEvent):void
			{
				providers = event.result as ArrayCollection;
			}			
			
			
			
			///////////////////
			// Event Handler //
			///////////////////
			
			protected function saveB_clickHandler(event:MouseEvent):void
			{
				if (worksheetDG.selectedIndex == -1 && locationCB.selectedIndex == -1){
					Alert.show("Please select a Clinic.");
					locationCB.setFocus();
					return;
				}
				
				if (worksheetDG.selectedIndex == -1 && providerCB.selectedIndex == -1){
					Alert.show("Please select a Provider.");
					providerCB.setFocus();
					return;
				}
				
				if (worksheetDG.selectedIndex == -1 && dateDF.selectedDate == null){
					Alert.show("Please select a Date.");
					dateDF.setFocus();
					return;
				}
				
				var isValid:Boolean = validateForm();
				if (isValid){				
					var ws:Worksheet;
					if (worksheetDG.selectedIndex == -1){ //create
						ws = new Worksheet();
						ws.providerId = (providerCB.selectedItem as Provider).providerId;
						ws.providerName = (providerCB.selectedItem as Provider).name;
						ws.date = dateDF.selectedDate;
						ws.clinic = locationCB.selectedItem;
						ws.hrsWorked = new Number(hrsWorkedTI.text);
						ws.countySeen = new int(countySeenTI.text);
						ws.cccSeen = new int(cccSeenTI.text);
						ws.hmoSeen = new int(hmoSeenTI.text);
						ws.otherSeen = new int(otherSeenTI.text);
						ws.countyFaceMin = new int(countyfmTI.text);
						ws.countyOtherMin = new int (countyomTI.text);
						ws.cccFaceMin = new int(cccfmTI.text);
						ws.cccOtherMin = new int(cccomTI.text);
						ws.hmoFaceMin = new int(hmofmTI.text);
						ws.otherFaceMin = new int (otherfmTI.text);
						ws.numScheduled = new int(numScheduledTI.text);
						ws.numNoShow = new int(numNoshowTI.text);
						ws.numCancel = new int(numCancelTI.text);
						ws.numNew = new int(numNewTI.text);
						ws.numDropin = new int(numDropinTI.text);
						ws.dailySalary = new Number(dailySalaryTI.text);
						ws.enteredBy = user.username;
						dataService.createWorksheetForMgr(ws);					
					}else{ // update
						ws = worksheetDG.selectedItem as Worksheet;
						dataService.updateWorksheetForMgr(ws);
					}
					saveB.enabled = false;
				}
			}
			
			private function validateForm():Boolean
			{
				var validationArray:Array = Validator.validateAll([hrsWorkedV,countySeenV,countyfmV,countyomV,cccSeenV,cccfmV,cccomV,hmoSeenV,hmofmV,otherSeenV,otherfmV,numScheduledV,numNoshowV,numCancelV,numNewV,numDropinV]);
				if (validationArray.length > 0){
					return false;
				}
				return true				
			}
			
			protected function newB_clickHandler(event:MouseEvent):void
			{
				worksheetDG.selectedIndex = -1;
				dataService.getAllProvider();
				providerCB.selectedIndex = -1;
				locationCB.selectedIndex = -1;
				dateDF.selectedDate = new Date();
				providerCB.enabled = true;
				locationCB.enabled = true;
				dateDF.enabled = true;
				saveB.enabled = true;
			}
			
			protected function rmB_clickHandler(event:MouseEvent):void
			{
				if (worksheetDG.selectedIndex == -1){
					return;
				}
				
				var ws:Worksheet = worksheetDG.selectedItem as Worksheet;
				dataService.deleteWorksheetForMgr(ws);
			}
			
			protected function printB_clickHandler(event:MouseEvent):void
			{
				if (worksheets.length == 0){
					Alert.show("No records to print!");
					return;
				}
				
				//var printDialog:PrintDialog = new PrintDialog();
				//printDialog.setDataGrid(worksheetDG);
				var printDialog:WorksheetPrintDialog = new WorksheetPrintDialog();
				printDialog.worksheets = worksheets;
				PopUpManager.addPopUp(printDialog, this, true);
				PopUpManager.centerPopUp(printDialog);															
			}			
			
			protected function worksheetDG_itemClickHandler(event:ListEvent):void
			{
				saveB.enabled = true;
				
				providerCB.enabled = false;
				locationCB.enabled = false;
				dateDF.enabled = false;
			}
			
			protected function findB_clickHandler(event:MouseEvent):void
			{
				if (selectLocationCB.selectedIndex == -1 && selectProviderCB.selectedIndex == -1){
					Alert.show("Please select a Clinic or Provider!");
					selectLocationCB.setFocus();
					//findB.enabled = true;
				}else{
					var provider:Provider = null;
					var loc:String = null;
					provider = selectProviderCB.selectedItem;
					loc = selectLocationCB.selectedItem;
					if (provider != null && loc != null){
						dataService.getWorksheetForClinicAndProviderAndDateRange(loc, provider.providerId, startDateDF.selectedDate, endDateDF.selectedDate);
					}else if (provider == null){
						dataService.getWorksheetForClinicAndDateRange(loc, startDateDF.selectedDate, endDateDF.selectedDate);						
					}else{
						dataService.getWorksheetForProviderAndDateRange(provider.providerId, startDateDF.selectedDate, endDateDF.selectedDate);						
					}
					//findB.enabled = false;					
				}
			}

			
			////////////////////
			// Label Function //
			////////////////////			
			
			protected function formatNumber(item:Object,  column:DataGridColumn):String
			{
				return nf.format(item[column.dataField]);
			}
				
			protected function formatDate(item:Object, column:DataGridColumn):String
			{
				return df.format(item[column.dataField]);
			}				
			
			protected function formatCurrency(item:Object, column:DataGridColumn):String
			{
				return "$"+nf.format(item[column.dataField]);
			}
			
			protected function formatPercent(item:Object, column:DataGridColumn):String
			{
				return nf.format(item[column.dataField])+"%";
			}
						
		]]>
	</fx:Script>
	
	<mx:HBox width="100%" height="100%" 
			 horizontalScrollPolicy="auto" 
			 verticalScrollPolicy="auto" minHeight="0" minWidth="0">
		<mx:VBox 
			width="70%" 
			height="100%" 
			paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10">
			<mx:HBox paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10" width="100%">
				<s:Label text="{CLINIC}:" paddingTop="6"/>
				<s:ComboBox id="selectLocationCB" dataProvider="{locations}"/>
				<s:Label text="{PROVIDER}:" paddingTop="6"/>
				<s:ComboBox id="selectProviderCB" dataProvider="{providers}" labelField="name"/>
				<s:Label text="From:" paddingLeft="30" paddingTop="6"/>
				<mx:DateField id="startDateDF" selectedDate="{new Date()}"/>
				<s:Label text="To:" paddingLeft="30" paddingTop="6"/>
				<mx:DateField id="endDateDF" selectedDate="{new Date()}"/>
				<s:Button id="findB" label="Find" click="findB_clickHandler(event)" enabled="true"/>
			</mx:HBox>
			<mx:DataGrid  
				id="worksheetDG"
				lockedColumnCount="3" 
				horizontalScrollPolicy="auto" 
				verticalScrollPolicy="auto" 
				resizableColumns="true" width="100%" height="100%" paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10"
				dataProvider="{worksheets}" itemClick="worksheetDG_itemClickHandler(event)">
				<mx:columns>
					<mx:DataGridColumn headerText="{DATE}" dataField="date" width="120" labelFunction="formatDate"/>
					<mx:DataGridColumn headerText="{CLINIC}" dataField="clinic" width="120"/>
					<mx:DataGridColumn headerText="{PROVIDER_NAME}" dataField="providerName" width="150"/>
					<mx:DataGridColumn headerText="{HRS_WORKED}" dataField="hrsWorked" width="120"/>
					<mx:DataGridColumn headerText="{COUNTY_SEEN}" dataField="countySeen" width="120"/>
					<mx:DataGridColumn headerText="{COUNTY_FACE_MIN}" dataField="countyFaceMin" width="120"/>
					<mx:DataGridColumn headerText="{COUNTY_OTHER_MIN}" dataField="countyOtherMin" width="120"/>
					<mx:DataGridColumn headerText="{CCC_SEEN}" dataField="cccSeen" width="120"/>
					<mx:DataGridColumn headerText="{CCC_FACE_MIN}" dataField="cccFaceMin" width="120"/>
					<mx:DataGridColumn headerText="{CCC_OTHER_MIN}" dataField="cccOtherMin" width="120"/>
					<mx:DataGridColumn headerText="{HMO_SEEN}" dataField="hmoSeen" width="120"/>
					<mx:DataGridColumn headerText="{HMO_FACE_MIN}" dataField="hmoFaceMin" width="120"/>
					<mx:DataGridColumn headerText="{OTHER_SEEN}" dataField="otherSeen" width="120"/>
					<mx:DataGridColumn headerText="{OTHER_FACE_MIN}" dataField="otherFaceMin" width="120"/>						
					<mx:DataGridColumn headerText="{TOTAL_SCH}" dataField="numScheduled" width="120"/>
					<mx:DataGridColumn headerText="{TOTAL_NOSHOW}" dataField="numNoShow" width="120"/>
					<mx:DataGridColumn headerText="{TOTAL_CANCEL}" dataField="numCancel" width="120"/>
					<mx:DataGridColumn headerText="{NUM_NEW}" dataField="numNew" width="120"/>
					<mx:DataGridColumn headerText="{NUM_DROPIN}" dataField="numDropin" width="120"/>
					<mx:DataGridColumn headerText="{DAILY_SALARY}" dataField="dailySalary" labelFunction="formatCurrency" width="120"/>
					<mx:DataGridColumn headerText="{TOTAL_FACE_HRS}" dataField="totalFaceHours" labelFunction="formatNumber" width="120"/>
					<mx:DataGridColumn headerText="{TOTAL_OTHER_HRS}" dataField="totalOtherHours" labelFunction="formatNumber" width="120"/>
					<mx:DataGridColumn headerText="{TOTAL_SEEN}" dataField="totalSeen" width="120"/>
					<mx:DataGridColumn headerText="{PRODUCTIVITY}" dataField="productivity" labelFunction="formatPercent" width="120"/>
					<mx:DataGridColumn headerText="{COUNTY_FACE_REV}" dataField="countyFaceRevenue" labelFunction="formatCurrency" width="120"/>
					<mx:DataGridColumn headerText="{COUNTY_OTHER_REV}" dataField="countyOtherRevenue" labelFunction="formatCurrency" width="120"/>
					<mx:DataGridColumn headerText="{CCC_REV}" dataField="cccFaceRevenue" labelFunction="formatCurrency" width="120"/>
					<mx:DataGridColumn headerText="{REVENUE}" dataField="totalRevenue" labelFunction="formatCurrency" width="120"/>
					<mx:DataGridColumn headerText="{BALANCE}" dataField="balance" labelFunction="formatCurrency" width="180"/>			
					<mx:DataGridColumn headerText="{ENTERED_BY}" dataField="enteredBy" width="120"/>
				</mx:columns>
			</mx:DataGrid>
			<mx:HBox>
				<s:Button label="New" id="newB" click="newB_clickHandler(event)"/>
				<s:Button label="Remove" id="rmB" click="rmB_clickHandler(event)"/>
				<s:Button label="Print" id="printB" click="printB_clickHandler(event)"/>
			</mx:HBox>				
		</mx:VBox>
		<mx:Form 
			horizontalScrollPolicy="auto" 
			verticalScrollPolicy="auto" 
			width="30%" 
			height="100%" paddingLeft="10" paddingTop="10" paddingBottom="10"
			labelWidth="120">
			
			<mx:FormHeading label="Daily Report Information"/>
			<mx:FormItem label="{DATE}:">
				<mx:DateField id="dateDF" enabled="false" selectedDate="{worksheetDG.selectedItem.date}"/>				
			</mx:FormItem>		
			<mx:FormItem label="{CLINIC}:">
				<s:ComboBox id="locationCB" enabled="false" dataProvider="{locations}" selectedItem="{worksheetDG.selectedItem.clinic}"/>
			</mx:FormItem>
			<mx:FormItem label="{PROVIDER_NAME}:">
				<s:ComboBox id="providerCB" enabled="false" labelField="name" dataProvider="{providers}" selectedItem="{worksheetDG.selectedItem.providerName}"/>
			</mx:FormItem>
			<mx:FormItem label="{HRS_WORKED}:">
				<s:TextInput id="hrsWorkedTI" text="@{worksheetDG.selectedItem.hrsWorked}"/>
			</mx:FormItem>
			<mx:FormItem label="{COUNTY_SEEN}:">
				<s:TextInput id="countySeenTI" text="@{worksheetDG.selectedItem.countySeen}"/>
			</mx:FormItem>
			<mx:FormItem label="{COUNTY_FACE_MIN}:">
				<s:TextInput id="countyfmTI" text="@{worksheetDG.selectedItem.countyFaceMin}"/>
			</mx:FormItem>
			<mx:FormItem label="{COUNTY_OTHER_MIN}:">
				<s:TextInput id="countyomTI" text="@{worksheetDG.selectedItem.countyOtherMin}"/>
			</mx:FormItem>
			<mx:FormItem label="{CCC_SEEN}:">
				<s:TextInput id="cccSeenTI" text="@{worksheetDG.selectedItem.cccSeen}"/>
			</mx:FormItem>
			<mx:FormItem label="{CCC_FACE_MIN}:">
				<s:TextInput id="cccfmTI" text="@{worksheetDG.selectedItem.cccFaceMin}"/>
			</mx:FormItem>
			<mx:FormItem label="{CCC_OTHER_MIN}:">
				<s:TextInput id="cccomTI" text="@{worksheetDG.selectedItem.cccOtherMin}"/>
			</mx:FormItem>
			<mx:FormItem label="{HMO_SEEN}:">
				<s:TextInput id="hmoSeenTI" text="@{worksheetDG.selectedItem.hmoSeen}"/>
			</mx:FormItem>
			<mx:FormItem label="{HMO_FACE_MIN}:">
				<s:TextInput id="hmofmTI" text="@{worksheetDG.selectedItem.hmoFaceMin}"/>
			</mx:FormItem>
			<mx:FormItem label="{OTHER_SEEN}:">
				<s:TextInput id="otherSeenTI" text="@{worksheetDG.selectedItem.otherSeen}"/>
			</mx:FormItem>
			<mx:FormItem label="{OTHER_FACE_MIN}:">
				<s:TextInput id="otherfmTI" text="@{worksheetDG.selectedItem.otherFaceMin}"/>
			</mx:FormItem>
			<mx:FormItem label="{TOTAL_SCH}:">
				<s:TextInput id="numScheduledTI" text="@{worksheetDG.selectedItem.numScheduled}"/>
			</mx:FormItem>
			<mx:FormItem label="{TOTAL_NOSHOW}:">
				<s:TextInput id="numNoshowTI" text="@{worksheetDG.selectedItem.numNoShow}"/>
			</mx:FormItem>
			<mx:FormItem label="{TOTAL_CANCEL}:">
				<s:TextInput id="numCancelTI" text="@{worksheetDG.selectedItem.numCancel}"/>
			</mx:FormItem>
			<mx:FormItem label="{NUM_NEW}:">
				<s:TextInput id="numNewTI" text="@{worksheetDG.selectedItem.numNew}"/>
			</mx:FormItem>
			<mx:FormItem label="{NUM_DROPIN}:">
				<s:TextInput id="numDropinTI" text="@{worksheetDG.selectedItem.numDropin}"/>
			</mx:FormItem>
			<mx:FormItem label="{DAILY_SALARY}:">
				<s:TextInput id="dailySalaryTI" text="@{worksheetDG.selectedItem.dailySalary}"/>
			</mx:FormItem>
			<mx:FormItem>
				<s:Button label="Save" id="saveB" click="saveB_clickHandler(event)"/>				
			</mx:FormItem>			
		</mx:Form>												
	</mx:HBox>
	
</s:BorderContainer>

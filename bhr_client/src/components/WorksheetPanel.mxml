<?xml version="1.0" encoding="utf-8"?>
<s:Panel xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx"
		 creationComplete="panel1_creationCompleteHandler(event)">
	
	<fx:Declarations>
		<mx:NumberFormatter id="nf" precision="2" rounding="up"/>
		
		<mx:NumberValidator id="hrsWorkedV" domain="int" required="false" minValue="0" maxValue="24" source="{hrsWorkedTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="countySeenV" domain="int" required="false" minValue="0" maxValue="1000" source="{countySeenTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="countyfmV" domain="int" required="false" minValue="0" maxValue="1440" source="{countyfmTI}" property="text" triggerEvent=""/>		
		<mx:NumberValidator id="countyomV" domain="int" required="false" minValue="0" maxValue="1440" source="{countyomTI}" property="text" triggerEvent=""/>		
		<mx:NumberValidator id="cccSeenV" domain="int" required="false" minValue="0" maxValue="1000" source="{cccSeenTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="cccfmV" domain="int" required="false" minValue="0" maxValue="1440" source="{cccfmTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="cccomV" domain="int" required="false" minValue="0" maxValue="1440" source="{cccomTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="hmoSeenV" domain="int" required="false" minValue="0" maxValue="1000" source="{hmoSeenTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="hmofmV" domain="int" required="false" minValue="0" maxValue="1440" source="{hmofmTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="otherSeenV" domain="int" required="false" minValue="0" maxValue="1000" source="{otherSeenTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="otherfmV" domain="int" required="false" minValue="0" maxValue="1440" source="{otherfmTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="numScheduledV" domain="int" required="false" minValue="0" maxValue="1000" source="{numScheduledTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="numNoshowV" domain="int" required="false" minValue="0" maxValue="1000" source="{numNoshowTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="numCancelV" domain="int" required="false" minValue="0" maxValue="1000" source="{numCancelTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="numNewV" domain="int" required="false" minValue="0" maxValue="1000" source="{numNewTI}" property="text" triggerEvent=""/>
		<mx:NumberValidator id="numDropinV" domain="int" required="false" minValue="0" maxValue="1000" source="{numDropinTI}" property="text" triggerEvent=""/>
	</fx:Declarations>	
	
	
	<fx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.controls.Alert;
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			import mx.rpc.remoting.mxml.RemoteObject;
			import mx.validators.ValidationResult;
			import mx.validators.Validator;
			
			import spark.events.IndexChangeEvent;
			
			import valueObjects.Employee;
			import valueObjects.Worksheet;						
			
			//label
			[Bindable]
			private static var EMP_ID:String = "Id";
			[Bindable]
			private static var EMP_NAME:String = "Name";
			[Bindable]
			private static var HRS_WORKED:String = "Hrs Worked";
			[Bindable]
			private static var COUNTY_SEEN:String = "COUNTY Seen";
			[Bindable]
			private static var COUNTY_FACE_MIN:String = "Billable Mins (face)";
			[Bindable]
			private static var COUNTY_OTHER_MIN:String = "Billable Mins (other)";			
			[Bindable]
			private static var CCC_SEEN:String = "CCC Seen";
			[Bindable]
			private static var CCC_FACE_MIN:String = "Billable Mins (face)";
			[Bindable]
			private static var CCC_OTHER_MIN:String = "Billable Mins (other)";			
			[Bindable]
			private static var HMO_SEEN:String = "HMO Seen";
			[Bindable]
			private static var HMO_FACE_MIN:String = "Billable Mins (face)";			
			[Bindable]
			private static var OTHER_SEEN:String = "Other Seen";
			[Bindable]
			private static var OTHER_FACE_MIN:String = "Billable Mins (face)";			
			[Bindable]
			private static var TOTAL_SCH:String = "Total Scheduled";
			[Bindable]
			private static var TOTAL_NOSHOW:String = "Total No-Shows";
			[Bindable]
			private static var TOTAL_CANCEL:String = "Total Cancelation";
			[Bindable]
			private static var NUM_NEW:String = "How many News";
			[Bindable]
			private static var NUM_DROPIN:String = "How many Drop-Ins";			
			// calculated column
			[Bindable]
			private static var TOTAL_FACE_HRS:String = "Total Hours (face)";
			[Bindable]
			private static var TOTAL_OTHER_HRS:String = "Total Hours (other)";
			[Bindable]
			private static var TOTAL_SEEN:String = "Total Seen";
			[Bindable]
			private static var PRODUCTIVITY:String = "Productivity";
			[Bindable]
			private static var DAILY_SALARY:String = "Daily Salary";
			[Bindable]
			private static var COUNTY_FACE_REV:String = "County (face) $";
			[Bindable]
			private static var COUNTY_OTHER_REV:String = "County (other) $";
			[Bindable]
			private static var CCC_REV:String = "CCC $";						
			[Bindable]
			private static var REVENUE:String = "Total Revenue";
			[Bindable]
			private static var BALANCE:String = "Balance";
			

			public var dataService:RemoteObject;
			
			[Bindable]
			private var locations:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var worksheets:ArrayCollection = new ArrayCollection();
			[Bindable]
			private var employees:ArrayCollection = new ArrayCollection();
			
			
			protected function panel1_creationCompleteHandler(event:FlexEvent):void
			{
				dataService.createWorksheet.addEventListener(ResultEvent.RESULT, dataService_createWorksheet_resultHandler);
				dataService.createWorksheet.addEventListener(FaultEvent.FAULT, dataService_createWorksheet_faultHandler);
				dataService.getWorksheetForClinicAndDate.addEventListener(ResultEvent.RESULT, dataService_getWorksheetForClinicAndDate_resultHandler);
				dataService.updateWorksheet.addEventListener(ResultEvent.RESULT, dataService_updateWorksheet_resultHandler);
				dataService.deleteWorksheet.addEventListener(ResultEvent.RESULT, dataService_deleteWorksheet_resultHandler);
				dataService.getLocation.addEventListener(ResultEvent.RESULT, dataService_getLocation_resultHandler);
				dataService.getAllEmployees.addEventListener(ResultEvent.RESULT, dataService_getAllEmployee_resultHandler);
				
				dataService.getLocation();
			}

			protected function dataService_createWorksheet_resultHandler(event:ResultEvent):void
			{
				if (event.result != null){
					worksheets.addItem(event.result);
					Alert.show("Worksheet entry created successfully!");
				}else{
					Alert.show("Problem create worksheet entry!");
				}
			}
			
			protected function dataService_createWorksheet_faultHandler(event:FaultEvent):void
			{
				Alert.show(event.fault.faultString, "Error Message");
				if (dateDF.selectedDate != null && locationCB.selectedItem != null){
					dataService.getWorksheetForClinicAndDate(locationCB.selectedItem, dateDF.selectedDate);
				}
			}						

			protected function dataService_getWorksheetForClinicAndDate_resultHandler(event:ResultEvent):void
			{
				worksheets = event.result as ArrayCollection;
			}

			protected function dataService_updateWorksheet_resultHandler(event:ResultEvent):void
			{
				var updated:Boolean = event.result;
				if (updated){
					Alert.show("Worksheet entry updated!");
				}else{
					Alert.show("Problem update worksheet entry!");
				}
			}

			protected function dataService_deleteWorksheet_resultHandler(event:ResultEvent):void
			{
				var removed:Boolean = event.result;
				if (removed){
					worksheets.removeItemAt(worksheetDG.selectedIndex);
					Alert.show("Worksheet entry removed!");
				}else{
					Alert.show("Problem remove worksheet entry!");
				}				
			}			
			
			protected function dataService_getLocation_resultHandler(event:ResultEvent):void
			{
				locations = event.result as ArrayCollection;	
			}
			
			protected function dataService_getAllEmployee_resultHandler(event:ResultEvent):void
			{
				employees = event.result as ArrayCollection;
			}			
			
			protected function dateOrLoc_changeHandler(event:Event):void
			{
				if (dateDF.selectedDate != null && locationCB.selectedItem != null){
					dataService.getWorksheetForClinicAndDate(locationCB.selectedItem, dateDF.selectedDate);
				}
			}
			
			protected function saveB_clickHandler(event:MouseEvent):void
			{
				if (locationCB.selectedIndex == -1){
					Alert.show("Please select a Location.");
					locationCB.setFocus();
					return;
				}
				
				if (worksheetDG.selectedIndex == -1 && empCB.selectedIndex == -1){
					Alert.show("Please select an Employee.");
					empCB.setFocus();
					return;
				}
								
				var isValid:Boolean = validateForm();
				if (isValid){				
					var ws:Worksheet;
					if (worksheetDG.selectedIndex == -1){
						ws = new Worksheet();
						ws.empId = (empCB.selectedItem as Employee).empId;
						ws.empName = (empCB.selectedItem as Employee).fullName;
						ws.date = dateDF.selectedDate;
						ws.clinic = locationCB.selectedItem;
						ws.hrsWorked = new Number(hrsWorkedTI.text);
						ws.countySeen = new int(countySeenTI.text);
						ws.cccSeen = new int(cccSeenTI.text);
						ws.hmoSeen = new int(hmoSeenTI.text);
						ws.otherSeen = new int(otherSeenTI.text);
						ws.countyFaceMin = new int(countyfmTI.text);
						ws.countyOtherMin = new int (countyomTI.text);
						ws.cccFaceMin = new int(cccfmTI.text);
						ws.cccOtherMin = new int(cccomTI.text);
						ws.hmoFaceMin = new int(hmofmTI.text);
						ws.otherFaceMin = new int (otherfmTI.text);
						ws.numScheduled = new int(numScheduledTI.text);
						ws.numNoShow = new int(numNoshowTI.text);
						ws.numCancel = new int(numCancelTI.text);
						ws.numNew = new int(numNewTI.text);
						ws.numDropin = new int(numDropinTI.text);
						ws.dailySalary = new Number(dailySalaryTI.text);
						dataService.createWorksheet(ws);					
					}else{
						ws = worksheetDG.selectedItem as Worksheet;
						dataService.updateWorksheet(ws);
					}
					saveB.enabled = false;
				}
			}

			private function validateForm():Boolean
			{
				var validationArray:Array = Validator.validateAll([hrsWorkedV,countySeenV,countyfmV,countyomV,cccSeenV,cccfmV,cccomV,hmoSeenV,hmofmV,otherSeenV,otherfmV,numScheduledV,numNoshowV,numCancelV,numNewV,numDropinV]);
				if (validationArray.length > 0){
					return false;
				}
				return true				
			}

			protected function newB_clickHandler(event:MouseEvent):void
			{
				worksheetDG.selectedIndex = -1;
				dataService.getAllEmployees();
				empCB.visible = true;
				empNameTI.visible = false;
				empCB.selectedIndex = -1;
				saveB.enabled = true;
			}

			protected function rmB_clickHandler(event:MouseEvent):void
			{
				if (worksheetDG.selectedIndex == -1){
					return;
				}
				
				var ws:Worksheet = worksheetDG.selectedItem as Worksheet;
				dataService.deleteWorksheet(ws);
			}


			protected function empCB_changeHandler(event:IndexChangeEvent):void
			{
			}

			protected function calcTotalFaceHrs(item:Object,  column:DataGridColumn):String
			{
				var n:Number = (item.countyFaceMin + item.cccFaceMin + item.hmoFaceMin + item.otherFaceMin)/60;
				return n.toPrecision(2);
			}
			
			protected function calcTotalOtherHrs(item:Object,  column:DataGridColumn):String
			{
				 var n:Number = (item.countyOtherMin + item.cccOtherMin)/60;
				 return n.toPrecision(2);
			}

			protected function calcTotalSeen(item:Object,  column:DataGridColumn):String
			{
				return item.countySeen + item.cccSeen + item.hmoSeen + item.otherSeen;
			}

			protected function calcProductivity(item:Object,  column:DataGridColumn):String
			{
				var n:Number;
				if (item.hrsWorked > 0){
					n = ((item.countyFaceMin + item.cccFaceMin + item.hmoFaceMin + item.otherFaceMin + item.countyOtherMin + item.cccOtherMin) / (item.hrsWorked * 60)) * 100;
				}else{
					n = 0;
				}
				return n.toPrecision(2) + "%";				
			}
			

			protected function worksheetDG_changeHandler(event:ListEvent):void
			{
				if (worksheetDG.selectedIndex == -1){
					empCB.visible = true;
					empNameTI.visible = false;
					empCB.selectedIndex = -1;
				}else{
					empCB.visible = false;
					empNameTI.visible = true;
					validateForm();
				}
			}

		]]>
	</fx:Script>
	
	<mx:HBox width="100%" height="100%" 
			 horizontalScrollPolicy="auto" 
			 verticalScrollPolicy="auto" minHeight="0" minWidth="0">
		<mx:VBox 
			width="70%" 
			height="100%" 
			paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10">
			<mx:HBox paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10" width="100%">
				<s:Label text="Location:" paddingTop="6"/>
				<s:ComboBox id="locationCB" dataProvider="{locations}" change="dateOrLoc_changeHandler(event)"/>
				<s:Label text="Date:" paddingLeft="30" paddingTop="6"/>
				<mx:DateField id="dateDF" selectedDate="{new Date()}" change="dateOrLoc_changeHandler(event)"/>
			</mx:HBox>
			<mx:DataGrid  
				lockedColumnCount="1" 
				horizontalScrollPolicy="auto" 
				verticalScrollPolicy="auto" 
				resizableColumns="true" width="100%" height="100%" paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10" id="worksheetDG"
			    dataProvider="{worksheets}" change="worksheetDG_changeHandler(event)">
				<mx:columns>
					<mx:DataGridColumn headerText="{EMP_NAME}" dataField="empName" width="150"/>
					<mx:DataGridColumn headerText="{HRS_WORKED}" dataField="hrsWorked" width="120"/>
					<mx:DataGridColumn headerText="{COUNTY_SEEN}" dataField="countySeen" width="120"/>
					<mx:DataGridColumn headerText="{COUNTY_FACE_MIN}" dataField="countyFaceMin" width="120"/>
					<mx:DataGridColumn headerText="{COUNTY_OTHER_MIN}" dataField="countyOtherMin" width="120"/>
					<mx:DataGridColumn headerText="{CCC_SEEN}" dataField="cccSeen" width="120"/>
					<mx:DataGridColumn headerText="{CCC_FACE_MIN}" dataField="cccFaceMin" width="120"/>
					<mx:DataGridColumn headerText="{CCC_OTHER_MIN}" dataField="cccOtherMin" width="120"/>
					<mx:DataGridColumn headerText="{HMO_SEEN}" dataField="hmoSeen" width="120"/>
					<mx:DataGridColumn headerText="{HMO_FACE_MIN}" dataField="hmoFaceMin" width="120"/>
					<mx:DataGridColumn headerText="{OTHER_SEEN}" dataField="otherSeen" width="120"/>
					<mx:DataGridColumn headerText="{OTHER_FACE_MIN}" dataField="otherFaceMin" width="120"/>						
					<mx:DataGridColumn headerText="{TOTAL_SCH}" dataField="numScheduled" width="120"/>
					<mx:DataGridColumn headerText="{TOTAL_NOSHOW}" dataField="numNoShow" width="120"/>
					<mx:DataGridColumn headerText="{TOTAL_CANCEL}" dataField="numCancel" width="120"/>
					<mx:DataGridColumn headerText="{NUM_NEW}" dataField="numNew" width="120"/>
					<mx:DataGridColumn headerText="{NUM_DROPIN}" dataField="numDropin" width="120"/>
					<mx:DataGridColumn headerText="{DAILY_SALARY}" dataField="dailySalary" width="120"/>
					<mx:DataGridColumn headerText="{TOTAL_FACE_HRS}" labelFunction="calcTotalFaceHrs" width="120"/>
					<mx:DataGridColumn headerText="{TOTAL_OTHER_HRS}" labelFunction="calcTotalOtherHrs" width="120"/>
					<mx:DataGridColumn headerText="{TOTAL_SEEN}" labelFunction="calcTotalSeen" width="120"/>
					<mx:DataGridColumn headerText="{PRODUCTIVITY}" labelFunction="calcProductivity" width="120"/>
					<mx:DataGridColumn headerText="{COUNTY_FACE_REV}" dataField="countyFaceRevenue" width="120"/>
					<mx:DataGridColumn headerText="{COUNTY_OTHER_REV}" dataField="countyOtherRevenue" width="120"/>
					<mx:DataGridColumn headerText="{CCC_REV}" dataField="cccFaceRevenue" width="120"/>
					<mx:DataGridColumn headerText="{REVENUE}" dataField="totalRevenue" width="120"/>
					<mx:DataGridColumn headerText="{BALANCE}" dataField="balance" width="120"/>					
				</mx:columns>
			</mx:DataGrid>
			<mx:HBox>
				<s:Button label="New" id="newB" click="newB_clickHandler(event)"/>
				<s:Button label="Remove" id="rmB" click="rmB_clickHandler(event)"/>
			</mx:HBox>				
		</mx:VBox>
		<mx:Form 
			horizontalScrollPolicy="auto" 
			verticalScrollPolicy="auto" 
			width="30%" 
			height="100%" paddingLeft="10" paddingTop="10" paddingRight="10" paddingBottom="10">
			
			<mx:FormItem label="{EMP_NAME}:">
				<s:TextInput id="empNameTI" enabled="false" text="{worksheetDG.selectedItem.empName}"/>
				<s:ComboBox id="empCB" visible="false" dataProvider="{employees}" selectedIndex="-1" labelField="fullName" change="empCB_changeHandler(event)" />
			</mx:FormItem>
			<mx:FormItem label="{HRS_WORKED}:">
				<s:TextInput id="hrsWorkedTI" text="@{worksheetDG.selectedItem.hrsWorked}"/>
			</mx:FormItem>
			<mx:FormItem label="{COUNTY_SEEN}:">
				<s:TextInput id="countySeenTI" text="@{worksheetDG.selectedItem.countySeen}"/>
			</mx:FormItem>
			<mx:FormItem label="{COUNTY_FACE_MIN}:">
				<s:TextInput id="countyfmTI" text="@{worksheetDG.selectedItem.countyFaceMin}"/>
			</mx:FormItem>
			<mx:FormItem label="{COUNTY_OTHER_MIN}:">
				<s:TextInput id="countyomTI" text="@{worksheetDG.selectedItem.countyOtherMin}"/>
			</mx:FormItem>
			<mx:FormItem label="{CCC_SEEN}:">
				<s:TextInput id="cccSeenTI" text="@{worksheetDG.selectedItem.cccSeen}"/>
			</mx:FormItem>
			<mx:FormItem label="{CCC_FACE_MIN}:">
				<s:TextInput id="cccfmTI" text="@{worksheetDG.selectedItem.cccFaceMin}"/>
			</mx:FormItem>
			<mx:FormItem label="{CCC_OTHER_MIN}:">
				<s:TextInput id="cccomTI" text="@{worksheetDG.selectedItem.cccOtherMin}"/>
			</mx:FormItem>
			<mx:FormItem label="{HMO_SEEN}:">
				<s:TextInput id="hmoSeenTI" text="@{worksheetDG.selectedItem.hmoSeen}"/>
			</mx:FormItem>
			<mx:FormItem label="{HMO_FACE_MIN}:">
				<s:TextInput id="hmofmTI" text="@{worksheetDG.selectedItem.hmoFaceMin}"/>
			</mx:FormItem>
			<mx:FormItem label="{OTHER_SEEN}:">
				<s:TextInput id="otherSeenTI" text="@{worksheetDG.selectedItem.otherSeen}"/>
			</mx:FormItem>
			<mx:FormItem label="{OTHER_FACE_MIN}:">
				<s:TextInput id="otherfmTI" text="@{worksheetDG.selectedItem.otherFaceMin}"/>
			</mx:FormItem>
			<mx:FormItem label="{TOTAL_SCH}:">
				<s:TextInput id="numScheduledTI" text="@{worksheetDG.selectedItem.numScheduled}"/>
			</mx:FormItem>
			<mx:FormItem label="{TOTAL_NOSHOW}:">
				<s:TextInput id="numNoshowTI" text="@{worksheetDG.selectedItem.numNoShow}"/>
			</mx:FormItem>
			<mx:FormItem label="{TOTAL_CANCEL}:">
				<s:TextInput id="numCancelTI" text="@{worksheetDG.selectedItem.numCancel}"/>
			</mx:FormItem>
			<mx:FormItem label="{NUM_NEW}:">
				<s:TextInput id="numNewTI" text="@{worksheetDG.selectedItem.numNew}"/>
			</mx:FormItem>
			<mx:FormItem label="{NUM_DROPIN}:">
				<s:TextInput id="numDropinTI" text="@{worksheetDG.selectedItem.numDropin}"/>
			</mx:FormItem>
			<mx:FormItem label="{DAILY_SALARY}:">
				<s:TextInput id="dailySalaryTI" text="@{worksheetDG.selectedItem.dailySalary}"/>
			</mx:FormItem>
			
			<s:Button label="Save" id="saveB" click="saveB_clickHandler(event)"/>
		</mx:Form>												
	</mx:HBox>
	
</s:Panel>
